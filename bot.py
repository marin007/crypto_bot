import logging
import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞—Ä–µ–∂–¥–∞–º–µ .env —Ñ–∞–π–ª
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CRYPTO_SYMBOL = "bitcoin"

# –õ–æ–≥–≤–∞–Ω–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤–µ–π! –ê–∑ —Å—ä–º —Ç–≤–æ—è—Ç Crypto Alert Bot üöÄ")

# –ö–æ–º–∞–Ω–¥–∞ /price
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    price = get_crypto_price(CRYPTO_SYMBOL)
    await update.message.reply_text(f"–¢–µ–∫—É—â–∞ —Ü–µ–Ω–∞ –Ω–∞ {CRYPTO_SYMBOL}: ${price}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –≤–∑–µ–º–∞–Ω–µ –Ω–∞ —Ü–µ–Ω–∞—Ç–∞ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—É—Ç–∞—Ç–∞
def get_crypto_price(symbol="bitcoin"):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol.lower()}&vs_currencies=usd"
    
    try:
        # –ò–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º API-—Ç–æ
        response = requests.get(url)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –µ —É—Å–ø–µ—à–Ω–∞ (status code 200)
        if response.status_code == 200:
            data = response.json()
            logging.error(f"API –æ—Ç–≥–æ–≤–æ—Ä: {url}")  # –õ–æ–≥–≤–∞–Ω–µ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∏—Ç–µ –∑–∞ –¥–µ–±—ä–≥
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–∏–º–≤–æ–ª—ä—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –æ—Ç–≥–æ–≤–æ—Äa
            if symbol.lower() in data:
                # –í–∑–µ–º–∞–Ω–µ –Ω–∞ —Ü–µ–Ω–∞—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ –¥–æ 2 –∑–Ω–∞–∫–∞ —Å–ª–µ–¥ –¥–µ—Å–µ—Ç–∏—á–Ω–∞—Ç–∞ –∑–∞–ø–µ—Ç–∞—è
                price = data[symbol.lower()]["usd"]
                formatted_price = "{:,.2f}".format(price)
                return formatted_price
            else:
                logging.error(f"–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ {symbol}. –û—Ç–≥–æ–≤–æ—Ä—ä—Ç –µ: {data}")
                return f"–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ {symbol}."
        else:
            logging.error(f"–ù–µ—É—Å–ø–µ—à–Ω–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º API-—Ç–æ. –ö–æ–¥ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞: {response.status_code}")
            return f"–ù–µ—É—Å–ø–µ—à–Ω–∞ –∑–∞—è–≤–∫–∞ –∫—ä–º API-—Ç–æ. –ö–æ–¥ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞: {response.status_code}"
    except Exception as e:
        # –õ–æ–≥–≤–∞–Ω–µ –Ω–∞ –≥—Ä–µ—à–∫–∏ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞
        logging.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞ –∫—ä–º API-—Ç–æ: {str(e)}")
        return "–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ—Ç–æ —Å API-—Ç–æ."

if __name__ == "__main__":
    # –°—Ç–∞—Ä—Ç –Ω–∞ –Ω–æ–≤–∏—è ApplicationBuilder API
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ç–µ
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("price", price))

    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
    app.run_polling()
